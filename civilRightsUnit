let currentImageIndex = 0;
let imageElements = [];
let definitions = []; // Store fetched definitions here

async function fetchArticles() {
  try {
    const definitionsResponse = await fetch(
      "https://script.google.com/macros/s/AKfycbyCSeqw_CWJLYTtEUarZW0w0uKbiWgXTaiOp1I8AFnlVy2z78l9_ne8NlFVyARYX62A/exec",
    );
    if (!definitionsResponse.ok) {
      throw new Error(
        "Network response was not ok for definitions " +
          definitionsResponse.statusText,
      );
    }
    definitions = await definitionsResponse.json(); // Load definitions from Google Sheets

    const response = await fetch(
      "https://script.google.com/macros/s/AKfycbxAj4ROhNlyWUjJfU1Q9XFY5Wb7YGUf0bnj58_PX9i4sSGr5kKOC3Ry7BeX-dtYZSrhQw/exec",
    );
    if (!response.ok) {
      throw new Error("Network response was not ok " + response.statusText);
    }
    const data = await response.json();
    addArticlesToSections(data);

    // After adding content, ensure image click events are set
    setUpImageEvents();
  } catch (error) {
    console.error("Error fetching articles:", error);
  }
}

function replaceDefinitions(content, definitions) {
  let markerIndex = 0;
  const markers = [];
  let updatedContent = content;

  definitions.forEach((def) => {
    const regex = new RegExp(`\\b${def.word}\\b`, "gi"); // 'gi' flag to match all cases
    updatedContent = updatedContent.replace(regex, (match) => {
      // Create temporary marker to prevent recursive replacements
      const marker = `%%%MARKER${markerIndex}%%%`;
      markers.push({
        marker,
        html: `<span class="underlined" title="${def.definition}">${match}</span>`,
      });
      markerIndex++;
      return marker;
    });
  });

  // Replace markers with actual HTML
  markers.forEach(({ marker, html }) => {
    updatedContent = updatedContent.replace(new RegExp(marker, "g"), html);
  });

  return updatedContent;
}

function addArticlesToSections(data) {
  const lessonTitleElement = document.querySelector("h1");
  lessonTitleElement.innerHTML = `${data.lessonTitle} <span class="theme-toggle" id="themeToggle"><i class="fa-solid fa-paintbrush"></i></span>`;

  const contentDiv = document.getElementById("content");
  contentDiv.innerHTML = ""; // Clear content before appending new elements

  Object.keys(data.parts).forEach((partId) => {
    const part = data.parts[partId];
    const partDiv = document.createElement("div");
    partDiv.className = "part-section";
    partDiv.id = partId;

    // Add new buttons container and section buttons container
    partDiv.innerHTML = `
      <h2>${part.title}</h2>
      <div class="part-buttons">
        <button class="objectives-button" data-part="${partId}">Objectives</button>
        <button class="notes-button" data-part="${partId}">Notes</button>
        <button class="assessment-button" data-part="${partId}">Assessment</button>
      </div>
      <div class="section-buttons">
      ${Object.keys(part.sections)
        .map(
          (secId, index) =>
            `<button class="toggle-content" data-part="${partId}" data-section="${index + 1}">${part.sections[secId].title}</button>`,
        )
        .join("")}
      </div>
      <div class="images-row"></div>
      ${Object.keys(part.sections)
        .map((secId, index) => {
          let content = part.sections[secId].content;
          content = replaceDefinitions(content, definitions); // Apply the replaceDefinitions function
          const videoUrl = content.match(
            /https:\/\/www\.youtube\.com\/watch\?v=([^"]+)/,
          );
          const iframeHtml = videoUrl
            ? `<div class="video-embed"><iframe width="560" height="315" src="https://www.youtube.com/embed/${videoUrl[1]}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>`
            : content;
          return `<div class="section" id="${partId}-section${index + 1}"><h3>${part.sections[secId].title}</h3><div class="section-content">${iframeHtml}</div></div>`;
        })
        .join("")}
    `;
    contentDiv.appendChild(partDiv);

    Object.keys(part.sections).forEach((sectionId, sectionIndex) => {
      const section = part.sections[sectionId];
      const contentString = section.content.toLowerCase();
      if (contentString.includes("<img")) {
        const imageContainer = partDiv.querySelector(".images-row");
        createImageRow(imageContainer, section.content);
        document.querySelector(
          `#${partId}-section${sectionIndex + 1} .section-content`,
        ).innerHTML = "";
      }
    });

    setupObjectiveButtons();
    setupNotesButtons();
    setupAssessmentButtons();  // <<--- Add this line to ensure assessment buttons are set up
  });

  document.getElementById("themeToggle").addEventListener("click", () => {
    document.getElementById("popup").style.display = "block";
  });

  setMenuNames();
  setupToggleButtons();
}


function setupObjectiveButtons() {
  const objectivesButtons = document.querySelectorAll('.objectives-button');
  objectivesButtons.forEach(button => {
    button.addEventListener('click', function() {
      const partId = this.getAttribute('data-part');
      showObjectivesPopup(partId);
    });
  });
}

function showObjectivesPopup(partId) {
  // Create or update a popup div
  let popup = document.getElementById('objectivesPopup');
  if (!popup) {
    popup = document.createElement('div');
    popup.id = 'objectivesPopup';
    popup.className = 'popup';
    document.body.appendChild(popup);
  }
  
  popup.innerHTML = `
    <h2>Objectives:</h2>
    <p>${getObjectivesText(partId)}</p>
    <button id="closeObjectivesPopup">Close</button>
  `;

  popup.style.display = 'block';

  document.getElementById('closeObjectivesPopup').addEventListener('click', () => {
    popup.style.display = 'none';
  });
}

function getObjectivesText(partId) {
  switch (partId) {
    case 'part1': return 'Describe how Emmitt Till and other lynchings were a product of white supremacy and how they influenced Civil Rights Leaders.';
    case 'part2': return 'Describe the attributes and successes of Civil Disobedience';
    case 'part3': return 'Describe the attributes and successes of Civil Disobedience';
    case 'part4': return 'Describe the attributes and successes of Civil Disobedience';
    case 'part5': return 'Describe the attributes and successes of Civil Disobedience';
    case 'part6': return 'Describe the attributes and successes of Civil Disobedience';
    case 'part7': return 'Compare and Contrast the beliefs of Malcolm X and Martin Luther King Jr.';
    case 'part8': return 'Summarize the beliefs of the Black Panther Party';
    default: return 'No objectives available.';
  }
}

function setupNotesButtons() {
  const notesButtons = document.querySelectorAll('.notes-button');
  notesButtons.forEach(button => {
    // Remove existing click event listener by cloning node
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);

    newButton.addEventListener('click', function() {
      const partId = this.getAttribute('data-part');
      const link = getNotesLink(partId);
      if (link !== '#') {
        window.open(link, '_blank');
      }
    });
  });
}

function getNotesLink(partId) {
  switch (partId) {
    case 'part1': return 'https://docs.google.com/document/d/19EG7GRbmVlp7JXAlC3NpKOlq2UBMAwpteVLAvX8v870/edit?tab=t.0';
    case 'part2': return 'https://docs.google.com/open?id=1wnM2JwLFFlS980gqqV9-JPP7tC3tVrvYFD3C_SIV8JU';
    case 'part3': return 'https://docs.google.com/open?id=1wnM2JwLFFlS980gqqV9-JPP7tC3tVrvYFD3C_SIV8JU';
    case 'part4': return 'https://docs.google.com/open?id=1wnM2JwLFFlS980gqqV9-JPP7tC3tVrvYFD3C_SIV8JU';
    case 'part5': return 'https://docs.google.com/open?id=1wnM2JwLFFlS980gqqV9-JPP7tC3tVrvYFD3C_SIV8JU';
    case 'part6': return 'https://docs.google.com/open?id=1wnM2JwLFFlS980gqqV9-JPP7tC3tVrvYFD3C_SIV8JU';
    case 'part7': return 'https://docs.google.com/open?id=1NVAp-ewiGaSOqd6_zLb61gltdmpvl9VAOZsVA13L51U';
    case 'part8': return 'https://docs.google.com/open?id=1xYsABUJXsHePlnPr3XrzWX_jmU_KD7OHl960JUnF2sw';
    default: return '#';
  }
}
function setupAssessmentButtons() {
  const assessmentButtons = document.querySelectorAll('.assessment-button');
  assessmentButtons.forEach(button => {
    // Remove existing click event listener by cloning node
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);

    newButton.addEventListener('click', function() {
      const partId = this.getAttribute('data-part');
      const link = getAssessmentLink(partId);
      if (link !== '#') {
        window.open(link, '_blank');
      }
    });
  });
}

function getAssessmentLink(partId) {
  switch (partId) {
    case 'part1': return 'https://classroom.google.com/c/NzA4Mzc5OTgzMzIy/a/NzU4OTE5ODQ4OTQx/details';
    case 'part2': return 'https://example.com/assessment/part2';
    case 'part3': return 'https://example.com/assessment/part3';
    case 'part4': return 'https://example.com/assessment/part4';
    case 'part5': return 'https://example.com/assessment/part5';
    case 'part6': return 'https://classroom.google.com/c/NzA4Mzc5OTgzMzIy/a/NzYxNzcyMzg0MTQw/details';
    case 'part7': return 'https://example.com/assessment/part7';
    case 'part8': return 'https://example.com/assessment/part8';
    default: return '#';
  }
}

document.addEventListener("DOMContentLoaded", () => {
  // Add your existing code here

  setupAssessmentButtons(); // Call the setup function for assessments
});
document.addEventListener("DOMContentLoaded", () => {
  themeToggle.addEventListener("click", () => {
    themePopup.style.display = "block";
  });
  closePopup.addEventListener("click", () => {
    themePopup.style.display = "none";
  });

  themeItems.forEach((item) => {
    item.addEventListener("click", function () {
      const theme = this.getAttribute("data-theme");
      setTheme(theme);
    });
  });

  document.getElementById("part1Menu").addEventListener("click", function () {
    showPart("part1");
  });
  document.getElementById("part2Menu").addEventListener("click", function () {
    showPart("part2");
  });
  document.getElementById("part3Menu").addEventListener("click", function () {
    showPart("part3");
  });
  document.getElementById("part4Menu").addEventListener("click", function () {
    showPart("part4");
  });
  document.getElementById("part5Menu").addEventListener("click", function () {
    showPart("part5");
  });
  document.getElementById("part6Menu").addEventListener("click", function () {
    showPart("part6");
  });
  document.getElementById("part7Menu").addEventListener("click", function () {
    showPart("part7");
  });
  document.getElementById("part8Menu").addEventListener("click", function () {
    showPart("part8");
  });

  document.getElementById("linksMenu").addEventListener("click", function () {
    showCustomContent("linksContent");
  });

  setMenuNames();
  showPart("part1");
  fetchArticles();
  addPartTitleEditListener();
  document.body.classList.add("theme-dark-grey");
  const initialThemeLink = document.createElement("link");
  initialThemeLink.rel = "stylesheet";
  initialThemeLink.href = "grey.css";
  document.head.appendChild(initialThemeLink);
  setupToggle();
});

function showCustomContent(contentId) {
  const parts = document.querySelectorAll(".part-section");
  const customContents = document.querySelectorAll(".custom-content");
  parts.forEach((part) => (part.style.display = "none"));
  customContents.forEach((content) => (content.style.display = "none"));

  const selectedContent = document.getElementById(contentId);
  if (selectedContent) {
    selectedContent.style.display = "block";
  }

  const menuItems = document.querySelectorAll(".menu > li");
  menuItems.forEach((item) => item.classList.remove("active-menu"));
  document
    .getElementById(`${contentId.replace("Content", "Menu")}`)
    .classList.add("active-menu");
}

function showPart(partId) {
  const parts = document.querySelectorAll(".part-section");
  const customContents = document.querySelectorAll(".custom-content");
  parts.forEach((part) => (part.style.display = "none"));
  customContents.forEach((content) => (content.style.display = "none")); // Hide all custom contents

  const selectedPart = document.getElementById(partId);
  if (selectedPart) {
    selectedPart.style.display = "block";
  }

  const menuItems = document.querySelectorAll(".menu > li");
  menuItems.forEach((item) => item.classList.remove("active-menu"));
  document.getElementById(`${partId}Menu`).classList.add("active-menu");
}

function setUpImageEvents() {
  imageElements = Array.from(document.querySelectorAll(".images-row .image"));

  imageElements.forEach((img) => {
    img.addEventListener("click", openModal);
  });
}

function createImageRow(container, sliderHtml) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(sliderHtml, "text/html");
  const images = Array.from(doc.querySelectorAll("img"));

  images.forEach((img) => {
    const imgElement = document.createElement("img");
    imgElement.src = img.src;
    imgElement.alt = img.alt;
    imgElement.className = "image";
    container.appendChild(imgElement);
  });
}

function openModal(event) {
  const modal = document.getElementById("imageModal");
  currentImageIndex = imageElements.indexOf(event.target);

  if (currentImageIndex !== -1) {
    modal.style.display = "block";
    updateModalImage();
  }

  document.getElementById("closeModal").onclick = function () {
    modal.style.display = "none";
  };

  document.getElementById("prevImage").onclick = () => {
    currentImageIndex =
      (currentImageIndex - 1 + imageElements.length) % imageElements.length;
    updateModalImage();
  };

  document.getElementById("nextImage").onclick = () => {
    currentImageIndex = (currentImageIndex + 1) % imageElements.length;
    updateModalImage();
  };
}

function updateModalImage() {
  if (
    imageElements.length > 0 &&
    currentImageIndex >= 0 &&
    currentImageIndex < imageElements.length
  ) {
    const modalImg = document.getElementById("imgModalContent");
    const captionText = document.getElementById("caption");

    modalImg.src = imageElements[currentImageIndex].src;
    captionText.innerHTML = imageElements[currentImageIndex].alt;
  }
}

function setupToggleButtons() {
  const sections = document.querySelectorAll(".section");
  sections.forEach((section) => {
    const partId = section.id.split("-")[0];
    const sectionIndex = section.id.split("-")[1];
    const button = document.querySelector(
      `.toggle-content[data-part="${partId}"][data-section="${sectionIndex.replace(
        "section",
        "",
      )}"]`,
    );

    if (button) {
      button.addEventListener("click", function () {
        if (button.innerText.toLowerCase().includes("images")) {
          const imageRow = document.querySelector(`#${partId} .images-row`);
          if (imageRow) {
            imageRow.style.display =
              imageRow.style.display === "none" ? "flex" : "none";
          }
        } else {
          const allButtons = document.querySelectorAll(
            `#${partId} .toggle-content`,
          );
          allButtons.forEach((btn) => {
            btn.classList.remove("active");
            const btnSectionIndex = btn.getAttribute("data-section");
            const sec = document.querySelector(
              `#${partId}-section${btnSectionIndex}`,
            );
            if (sec) {
              sec.querySelector(".section-content").style.display = "none";
              sec.querySelector("h3").style.display = "none";
            }
          });

          const section = document.querySelector(
            `#${partId}-section${sectionIndex.replace("section", "")}`,
          );
          if (section) {
            section.querySelector("h3").style.display = "block";
            section.querySelector(".section-content").style.display = "block";
            button.classList.add("active");
          }
        }
      });

      if (sectionIndex === "section1") {
        button.classList.add("active");
        section.querySelector("h3").style.display = "block";
        section.querySelector(".section-content").style.display = "block";
      }
    }
  });

  sections.forEach((section) => {
    if (!section.id.endsWith("section1")) {
      section.querySelector("h3").style.display = "none";
      section.querySelector(".section-content").style.display = "none";
    }
  });
}

function setMenuNames() {
  const parts = document.querySelectorAll(".part-section");
  parts.forEach((part) => {
    const partId = part.id;
    const partTitle = part.querySelector("h2").innerText;
    const menuItem = document.querySelector(`#${partId}Menu`);
    if (menuItem) {
      const iconName = getIconName(partId);
      menuItem.innerHTML = `<i class="${iconName}"></i> ${partTitle}`;
    }
  });
}

function getIconName(partId) {
  switch (partId) {
    case "part1":
      return "fa-solid fa-scale-unbalanced";
    case "part2":
      return "fa-solid fa-hand-fist";
    case "part3":
      return "fa-solid fa-utensils";
    case "part4":
      return "fa-solid fa-bus";
    case "part5":
      return "fa-solid fa-monument";
    case "part6":
      return "fa-solid fa-school";
    case "part7":
      return "fa-solid fa-comments";
    case "part8":
      return "fa-solid fa-paw";
    default:
      return "fa-solid fa-circle";
  }
}

function addPartTitleEditListener() {
  const partTitles = document.querySelectorAll(".part-section h2");
   partTitles.forEach((title) => {
    title.addEventListener("input", setMenuNames);
  });
}

const themeToggle = document.getElementById("themeToggle");
const themePopup = document.getElementById("popup");
const themeItems = themePopup.querySelectorAll("li");
const closePopup = document.getElementById("closePopup");

const themeStylesheets = {
  "theme-dark-grey": "grey.css",
  "theme-navy-blue-electric-blue": "blue.css",
  "theme-shades-of-purple": "purple.css",
  "theme-blue-shades-and-white": "shades.css",
  "theme-bold-and-daring": "bold.css",
};

function removeExistingThemeCSS() {
  const existingLinks = document.querySelectorAll(
    'head link[href$=".css"]:not([href="style.css"])',
  );
  existingLinks.forEach((link) => link.remove());
}

function setTheme(theme) {
  document.body.className = "";
  document.body.classList.add(theme);

  removeExistingThemeCSS();

  const themeLink = document.createElement("link");
  themeLink.rel = "stylesheet";
  themeLink.href = themeStylesheets[theme];
  document.head.appendChild(themeLink);

  themePopup.style.display = "none";
}
